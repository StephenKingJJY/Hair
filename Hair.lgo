;hair框架
;版本v1.4.0.20180125dev
;作者：SK (jjy@wiwy.us)
;@MIT License
;@第三方程序判断hair框架是否安装--SHOW PROCEDURE? "hair
;@判断hair框架是否正在运行--hair.detect
;系统保留海龟40（载入图片），在你的程序开始之前向系统申请$turtlefree得到一个可用的海龟编号
;系统保留图片缓存区从40号开始，您可以使用原生的bitcut、bitcopy在40号之前的缓存区工作
;系统保留计时器1（系统环境）3（键盘）2（数据），使用新建对象的方式得到计时器，hair将会帮助你规避冲突

to hair [:debug "true]
;打印文本信息并启动window模式
ct window
make "CASEIGNOREDP "TRUE
pr "hair框架启动中...
pr [StephenKing v1.4 @MIT License]

;启动预授权
make "hair_preauth "true

;debug模式相关
ifelse or :debug = 0 :debug = "false [make "hair_debug "false][make "hair_debug "true]
ifelse :hair_debug [pr "debug模式已启用 hair.debug.tool SETFOCUS [FMSLogo]] [make "erract [ts ct pr "程序出现错误，请把下面的错误信息提交给您的程序发行商以获取帮助。]]

;检验记录环境变量
if 6.35 > hair.base.getitem (count item 2 LOGOVERSION)-2 item 2 LOGOVERSION [hair.debug.error [您的fmslogo版本过低，请使用6.35及以上版本获得更好体验。] stop]
if or (not member? "FMSLogo.exe files) (not member? "hair.package files) [hair.debug.error "当前目录错误或者文件缺失 stop]

;启动简写指令
hair.noconflict "$

;获取保存窗口初始句柄
if not name? "hair_hwnd [
	dllload "user32.dll
	make "hair_hwnd dllcall [L FindWindowA S FMSLogo L 0]
	dllfree
]

;配置默认的变量
if not name? "hair_keepword [make "hair_keepword [class hair new hook all $ destroy cancel listen inherit method before after attr tip objectname havedefine]] ;设置框架保留字
if not name? "hair_version [make "hair_version 1.4] ;hair框架版本
if not name? "hair_language [make "hair_language "en_us] ;hair语言版本
if not name? "hair_detect [make "hair_detect "false] ;开启检测缓存
if not name? "hair_turtle [make "hair_turtle [40]] ;标记占用海龟
if not name? "hair_res [make "hair_res "hair_res] ;设定资源目录
if not name? "hair_timeauth [make "hair_timeauth 0] ;初始化时间戳
if not name? "hair_timer_id [make "hair_timer_id []] ;标记计时器占用id
if not name? "hair_background_async [make "hair_background_async []] ;支持异步语句
if not name? "hair_hook_array [make "hair_hook_array $array 200] ;钩子数组的默认最大存储值为200
if not name? "hair_hook_index [make "hair_hook_index []] ;设置一个索引，用于快速定位钩子函数
if not name? "hair_object_list [make "hair_object_list []] ;存储所有的对象名称
if not name? "hair_object_class [make "hair_object_class []] ;存储所有的类名
if not name? "hair_object_havedefine [make "hair_object_havedefine []] ;为了简化调用而已经定义过的过程名称
if not name? "hair_object_current [make "hair_object_current "] ;当前操作的对象，帮助简化调用
if not name? "hair_resource_piclimit [make "hair_resource_piclimit 40] ;图片资源缓存变量
if not name? "hair_resource_picidlist [make "hair_resource_picidlist []] ;图片id与名称对应表
if member? [幼圆] fontfacenames [($setfont -16 0 [幼圆])] ;设置字体，幼圆字体字号使中英文宽度一致
if member? [微软雅黑] fontfacenames [($setfont -16 0 [微软雅黑])] ;设置字体，有微软雅黑时使用雅黑，解决winxp

;17年8月8日：还是打算使用传统的命令方式实现类的定义和对象的创建
new "Project "Class
	;但是打算使用连续定义的方式简化调用,startup属性用来标记启动时调用的主入口过程，默认为main，depend属性用来记载被依赖的组件。
	.attr [title untitle width 1000 height 1000 mode ss startup main depend [hair.gui hair.file hair.sql hair.i18n hair.rebol]]
	;通过保存上一个操纵的对象来实现简单调用，支持过程名也支持在表中写语句
	.before [if not empty? hair.object.select "project [hair.debug.error _e "不能重复创建project对象 cancel] if :hair_debug [hair.base.settitle "untitle\(Hair\ on\ FMSLogo\)]]
	;cancel用来终止对象的创建过程，before表示定义对象创建之前所需的操作.after用来描述对象销毁前的步骤
	.after [hair.debug.error "project对象已被删除]
	.listen "width [if :hair_debug [hair.debug.error "不能在此处指定宽度 cancel]]
	.listen "height [if :hair_debug [hair.debug.error "不能在此处指定高度 cancel]]
	;这里只对窗口化fs模式做响应，已知bug是只能响应一次
	.listen "mode [if this.mode="fs [windowset "Commander 0 setfocus [FMSLogo] make "hair_gui_listenkey "true]]
	.listen "title [hair.base.settitle this.title]

;如果是debug模式，即使用定义的项目类创建一个对象
if :hair_debug [new "yourproject "Project]

;新建一个计时器类，保持所有类的首字母大写，用于良好的编码规范
new "Timer "Class
	.attr [id 1 delay 100 command [] mode noyield]
	.before [make "hair_timer_temp 0 for [i 1 31][
		if and (not member? :i :hair_timer_id)(:hair_timer_temp=0) [make "hair_timer_temp :i]]
		ifelse :hair_timer_temp = 0 [hair.debug.error "计时器已被用完 cancel][this.id.value :hair_timer_temp
		queue "hair_timer_id :hair_timer_temp]]
	.method "start [settimer this.id this.delay this.command]
	.method "stop [cleartimer this.id]
	.method "restart [this.stop this.start]
	.after [make "hair_timer_id remove this.id :hair_timer_id this.stop]
	;此处再定义当计时器的模式变更后的操作
	.listen "mode [if this.mode.h = this.mode [cancel]
		make "hair_timer_temp 0 ifelse this.mode="noyield [
		for [i 1 16] [if and (not member? :i :hair_timer_id) (:hair_timer_temp=0)[make "hair_timer_temp :i]]
		ifelse :hair_timer_temp = 0 [hair.debug.error "noyield模式计时器已被占满 cancel] [this.id.value :hair_timer_temp]
	] [
		for [i 17 31] [if and (not member? :i :hair_timer_id) (:hair_timer_temp=0)[make "hair_timer_temp :i]]
		ifelse :hair_timer_temp = 0 [hair.debug.error "yield模式计时器已被占满 cancel] [make "hair_timer_id remove this.id :hair_timer_id this.id.value :hair_timer_temp]
	]]
	.listen "id [ifelse member? this.id :hair_timer_id [hair.debug.error "该id已被占用 cancel][queue "hair_timer_id this.id make "hair_timer_id remove this.id.h :hair_timer_id]]

;默认加载预制的gui模块、文件模块
$use [hair.file hair.sql hair.i18n hair.mail hair.gui hair.xml hair.web]

;获取保存当前目录
if not name? "hair_maindir [make "hair_maindir $whatdir]
if :hair_debug [pr se "当前hair程序执行主目录 :hair_maindir]

;关闭预授权
ern "hair_preauth

new "hair_timer_system "Timer
	.mode.value "noyield
	.delay.value 60000
	.command.value [hair.background.timersystem]
	.start

new "hair_timer_data "Timer
	.mode.value "noyield
	.delay.value 100
	.command.value [hair.background.async.repeat hair.hook.create "hair_timer_data]
	.start

;打印信息
pr "框架启动完毕

end
bury "hair
