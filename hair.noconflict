;该命令用来简化框架中的基础命令
;简化命令通常由$开头，在hair最初被启动时设置
;用户可以通过该命令在与其他框架冲突时使用其他的替代符号
;命令版本号v1.3

to hair.noconflict :symbol
hair.detect
make "hair_symbol :symbol
localmake "s :symbol

;不需要标识符的指令
catch "error [copydef         "hook          "hair.hook.bind     ];--hook :a.. :c..      绑定钩子函数
catch "error [copydef         "destroy       "hair.object.destroy];--destroy :name       销毁对象
catch "error [copydef         "new           "hair.object.new    ];--new :name :class    根据类创建对象
catch "error [copydef         "'             "hair.debug.'       ];--' :a                框架注释留用

;hair系统基本功能指令
catch "error [copydef word :s "detect        "hair.detect        ];--$detect             判断框架是否载入并显示提示
catch "error [copydef word :s "exit          "hair.exit          ];--$exit               退出hair框架
catch "error [copydef word :s "noconflict    "hair.noconflict    ];--$noconflict :symbol 简化框架中的基础命令
catch "error [copydef word :s "restart       "hair.restart       ];--$restart [:debug]   重启hair框架
catch "error [copydef word :s "use           "hair.use           ];--$use :module        框架扩展和模块化

;pclogo时代移植指令
catch "error [copydef word :s "aget          "hair.old.aget      ];--$aget :a :v         设定数组的值
catch "error [copydef word :s "array         "hair.old.array     ];--$array :v           创建数组
catch "error [copydef word :s "aset          "hair.old.aset      ];--$aset :a :v :c      读取数组的值
catch "error [copydef word :s "bm            "remove             ];--$bm :a :b           删除指定元素
catch "error [copydef word :s "setfont       "hair.old.setfont   ];--$setfont :f.. :s..  设定字体字号
catch "error [copydef word :s "tt            "hair.old.tt        ];--$tt :text           在屏幕上输出内容

;base类指令系列
catch "error [copydef word :s "allfiles      "hair.base.allfiles ];--$allfiles           输出当前目录下所有文件
catch "error [copydef word :s "asc           "hair.base.asc      ];--$asc :list          升序排列一个表(无重复)
catch "error [copydef word :s "bmitem        "hair.base.bmitem   ];--$bmitem :n :v       删除表或字中指定位置的元素
catch "error [copydef word :s "copyfile      "hair.base.copyfile ];--$copyfile :n1 :n2   复制文件
catch "error [copydef word :s "curosr        "hair.base.curosr   ];--$cursor :cur_name   控制鼠标光标形状和隐现
catch "error [copydef word :s "delitem       "hair.base.delitem  ];--$delitem :n :v      去除变量的前几位
catch "error [copydef word :s "desc          "hair.base.desc     ];--$desc :list         倒序排列一个表(无重复)
catch "error [copydef word :s "getitem       "hair.base.getitem  ];--$getitem :n :v      获取变量的前几位
catch "error [copydef word :s "hex2rgb       "hair.base.hex2rgb  ];--$hex2rgb :h :r      16进制颜色转rgb格式
catch "error [copydef word :s "index         "hair.base.index    ];--$index :v :list     获取元素在表中第一次出现的位置
catch "error [copydef word :s "logoxy        "hair.base.logoxy   ];--$logoxy :xy         转化坐标为原始logo坐标
catch "error [copydef word :s "makem         "hair.base.makem    ];--$makem :v           变量自减一
catch "error [copydef word :s "makep         "hair.base.makep    ];--$makep :v           变量自加一
catch "error [copydef word :s "match         "hair.base.match    ];--$match :v1 :v2      正则匹配
catch "error [copydef word :s "max           "hair.base.max      ];--$max :list          取数字表中的最大值
catch "error [copydef word :s "merge         "hair.base.merge    ];--$merge :v1 :v2      汇总字表
catch "error [copydef word :s "min           "hair.base.min      ];--$min :list          取数字表中的最小值
catch "error [copydef word :s "mousexy       "hair.base.mousexy  ];--$mousexy            输出以左上角为原点的鼠标位置
catch "error [copydef word :s "random        "hair.base.random   ];--$random :s :e       输出起止点之间的某个实数支持小数
catch "error [copydef word :s "rename        "hair.base.rename   ];--$rename :n1 :n2     重命名文件
catch "error [copydef word :s "first         "hair.base.safefirst];--$first :xx          安全的取字表的第一个值
catch "error [copydef word :s "last          "hair.base.safelast ];--$last :xx           安全的取字表的最后一个值
catch "error [copydef word :s "screenxy      "hair.base.screenxy ];--$screenxy :xy       转化坐标为屏幕坐标
catch "error [copydef word :s "shell         "hair.base.shell    ];--$shell :l :callback 文件方式执行一段shell语句
catch "error [copydef word :s "title         "hair.base.settitle ];--$title :text        设置主窗口标题
catch "error [copydef word :s "turtlefree    "hair.base.turtlefree ];--$turtlefree       获取一个空闲的海龟编号
catch "error [copydef word :s "whatdir       "hair.base.whatdir  ];--$whatdir            获取当前目录

;object类指令系列
catch "error [copydef word :s "class?        "hair.object.classp ];--$class? :name       判断字符串是否为类
catch "error [copydef word :s "object?       "hair.object.p      ];--$object? :name      判断字符串是否为对象
catch "error [copydef word :s "select        "hair.object.select ];--$select :class      输出所有指定类型的对象

;hook类指令系列
catch "error [copydef word :s "hookclear     "hair.hook.clear    ];--$hookclear :a..     清空指定钩子绑定的内容
catch "error [copydef word :s "hookcreate    "hair.hook.create   ];--$hookcreate :a..    注册钩子指令

;resource类指令系列
catch "error [copydef word :s "drawpic       "hair.resource.drawpic   ];--$drawpic :n    显示图片资源文件
catch "error [copydef word :s "drawpicwithmask "hair.resource.drawpicwithmask];:i1 :i2   显示带遮罩的透明图片
catch "error [copydef word :s "getpicid      "hair.resource.getpicid  ];--$getpicid :n   通过载入的图片名称获取id
catch "error [copydef word :s "loadpic       "hair.resource.loadpic   ];--$loadpic :i    载入图片资源文件

;debug类指令系列
catch "error [copydef word :s "build         "hair.debug.build   ];--$build              编译生成程序
catch "error [copydef word :s "statistic     "hair.debug.statistic];-$statistic          统计hair框架代码的总数
catch "error [copydef word :s "test          "hair.debug.test    ];--$test               用来测试程序运行
catch "error [copydef word :s "tool          "hair.debug.tool    ];--$tool               hair开发者工具

;background类指令系列
catch "async [copydef word :s "async         "hair.background.async   ];--$async :c      异步执行语句

;易错指令系列
catch "error [copydef word :s "hook          "hair.hook.bind     ];--$hook == hook
catch "error [copydef word :s "destroy       "hair.object.destroy];--$destroy == destroy
catch "error [copydef word :s "new           "hair.object.new    ];--$new == new
catch "error [copydef word :s "objectp       "hair.object.p      ];--$objectp == $object?
catch "error [copydef word :s "classp        "hair.object.classp ];--$classp == $class?

end
bury "hair.noconflict
