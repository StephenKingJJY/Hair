;hair框架
;版本v2.2.1.20221209dev
;作者：SK (jjy@wiwy.us)
;@MIT License
;系统保留海龟39（载入图片），在你的程序开始之前向系统申请$turtlefree得到一个可用的海龟编号
;系统保留图片缓存区从40号开始，您可以使用原生的bitcut、bitcopy在40号之前的缓存区工作
;系统保留计时器1（数据）2（键盘，如果使用了GUI模块），使用新建对象的方式得到计时器，hair将会帮助你规避冲突

to hair [:debug "true]
;打印文本信息并启动window模式
ct window
make "CASEIGNOREDP "TRUE
pr [hair is starting...]
pr [StephenKing v2.2.1 @MIT License]

;创建用来获取window缩放变量的窗口-v2.2
windowcreate "main "test "testH 100 0 1 1 []

;获取保存窗口初始句柄和window缩放变量用到的句柄-v2.2
dllload "user32.dll
make "hair_hwnd dllcall [L FindWindowA S FMSLogo L 0]
make "hair_window_radio dllcall [L FindWindowA S testH L 0]
dllload "Hair.dll
make "hair_window_radio 100/first dllcall se [L getWindowX L] :hair_window_radio
windowdelete "test
dllfree

;debug模式相关
ifelse or :debug = 0 :debug = "false [make "hair_debug "false][make "hair_debug "true]
ifelse :hair_debug [pr [debug mode on] hair.debug.tool setfocus [FMSLogo]] [make "erract [ts ct pr [Oops! There is an error in the program, please send the following information to program publisher for help.]]]

;检验记录环境变量
if 7.2 > hair.base.getitem (count item 2 logoversion)-2 item 2 logoversion [hair.debug.error [hair2.0 must run on FMSLogo which version is above 7.2.] stop]
if not member? "FMSLogo.exe files [hair.debug.error [current dir is wrong.] stop]

;启动简写指令
hair.noconflict "$

;配置默认的变量
make "hair_keepword [class hair new hook all $ destroy cancel listen inherit method before after attr tip objectname havedefine] ;设置框架保留字
make "hair_version "2.2.1 ;hair框架版本
make "hair_language "zh_cn ;hair语言版本
make "hair_detect "false ;开启检测缓存
make "hair_turtle [39] ;标记占用海龟
make "hair_res "hair_res ;设定资源目录
make "hair_timeauth 0 ;初始化时间戳
make "hair_timer_id [] ;标记计时器占用id
make "hair_background_async [] ;支持异步语句
make "hair_hook_array $array 200 ;钩子数组的默认最大存储值为200
make "hair_hook_index [] ;设置一个索引，用于快速定位钩子函数
make "hair_object_list [] ;存储所有的对象名称
make "hair_object_class [] ;存储所有的类名
make "hair_object_havedefine [] ;为了简化调用而已经定义过的过程名称
make "hair_object_current " ;当前操作的对象，帮助简化调用
make "hair_resource_piclimit 40 ;图片资源缓存变量
make "hair_resource_picidlist [] ;图片id与名称对应表
if member? [幼圆] fontfacenames [($setfont -16 0 [幼圆])] ;设置字体，幼圆字体字号使中英文宽度一致
if member? [微软雅黑] fontfacenames [($setfont -16 0 [微软雅黑])] ;设置字体，有微软雅黑时使用雅黑，解决winxp

;17年8月8日：还是打算使用传统的命令方式实现类的定义和对象的创建
;22年12月16日：多年以后，终于对这里优化了，更好的管理项目，打包执行程序
new "Project "Class
	;startup属性用来标记启动时调用的主入口文件，默认为main。这个文件需要在被load后自执行，比如添加startup变量。
	;filelist包含所有需要打包的文件，这些文件必须存在于主目录下
	;可能不是所有项目文件都需要在执行的时候被引用。还有个问题是拷贝的时候会丢失路径关系
	.attr [title untitle width 1000 height 1000 mode ss startup main.lgo filelist [main.lgo] needGUI false needRes false icon main.ico]
	.before [if not empty? hair.object.select "project [hair.debug.error _e "不能重复创建project对象 cancel] if :hair_debug [hair.base.settitle "untitle\(Hair\ on\ FMSLogo\)]]
	.listen "mode [run this.mode if this.mode="fs [if not :hair_debug [windowset "Commander 0 setfocus [FMSLogo]] make "hair_gui_listenkey "true]]
	.listen "title [hair.base.settitle this.title]
	;保存方法做几个操作：在dist下面新增项目文件夹，保存可被load的项目信息文件，创建引用入口文件，生成打包配置文件，拷贝项目文件
	.method "save [
		' [新增项目文件夹]
		localmake "_dir_restore hair.base.whatdir
		chdir :hair_maindir
		ifelse not member? "dist DIRECTORIES [mkdir "dist][chdir "dist]
		ifelse not member? this.title DIRECTORIES [mkdir this.title][chdir this.title]
		' [保存项目信息文件]
		openwrite word this.title ".hproj
		setwrite word this.title ".hproj
		pr [make "_projectname first hair.object.select "project]
		pr se [run se word :_projectname ".title.val quoted] quoted this.title
		pr se [run se word :_projectname ".width.val quoted] quoted this.width
		pr se [run se word :_projectname ".height.val quoted] quoted this.height
		pr se [run se word :_projectname ".mode.val quoted] quoted this.mode
		pr se [run se word :_projectname ".startup.val quoted] quoted this.startup
		pr se [run se word :_projectname ".needGUI.val quoted] quoted this.needGUI
		pr se [run se word :_projectname ".needRes.val quoted] quoted this.needRes
		pr se [run se word :_projectname ".icon.val quoted] quoted this.icon
		pr se [run list word :_projectname ".filelist.val] (list this.filelist)
		setwrite []
		close word this.title ".hproj
		' [创建引用入口文件]
		openwrite "_entry.lgo
		setwrite "_entry.lgo
		pr [make "startup [_entry]]
		pr [to _entry]
		pr [(hair "false)]
		if this.needGUI [pr "hairgui]
		pr [new "_p "project]
		pr se [_p.load] quoted this.title 
		pr se [load] quoted this.startup
		pr [end]
		setwrite []
		close "_entry.lgo
		' [生成打包配置文件]
		openwrite word this.title ".txt
		setwrite word this.title ".txt
		pr [\;!@Install@!UTF-8!]
		pr [GUIMode="2"]
		pr [MiscFlags="4"]
		pr (se [RunProgram="fmslogo -w] this.width [-h] this.height [-f -l _entry.lgo"])
		pr [\;!@InstallEnd@!]
		pr se [7zSFXBuilder_SFXName=] (word :hair_maindir "\\dist\\ this.title "\\ this.title ".exe)
		if not empty? this.icon [pr se [7zSFXBuilder_SFXIcon=] (word :hair_maindir "\\dist\\ this.title "\\ this.icon)]
		pr [7zSFXBuilder_UseDefMod=7zsd_LZMA2]
		pr se [7zSFXBuilder_SFXFile_1=] (word :hair_maindir "\\fmslogo.exe)
		pr se [7zSFXBuilder_SFXFile_2=] (word :hair_maindir "\\Hair.dll)
		pr se [7zSFXBuilder_SFXFile_3=] (word :hair_maindir "\\Hair.lgo)
		pr se [7zSFXBuilder_SFXFile_4=] (word :hair_maindir "\\startup.logoscript)
		pr se [7zSFXBuilder_SFXFile_5=] (word :hair_maindir "\\logolib\\)
		localmake "_i 6
		if this.needGUI [pr se (word "7zSFXBuilder_SFXFile_ :_i "=) (word :hair_maindir "\\HairGui.lgo) make "_i :_i+1]
		if this.needRes [pr se (word "7zSFXBuilder_SFXFile_ :_i "=) (word :hair_maindir "\\hair_res\\) make "_i :_i+1]
		foreach se this.filelist se "_entry.lgo word this.title ".hproj [
			pr se (word "7zSFXBuilder_SFXFile_ :_i "=) (word :hair_maindir "\\dist\\ this.title "\\ ? )
			make "_i :_i+1
		]
		pr [7zSFXBuilder_7Zip_Level=Ultra]
		pr [7zSFXBuilder_7Zip_Method=LZMA2]
		pr [7zSFXBuilder_7Zip_Dictionary=64 MB]
		pr [7zSFXBuilder_7Zip_BlockSize=Solid]
		setwrite []
		close word this.title ".txt
		' [拷贝项目文件]
		chdir :hair_maindir
		foreach this.filelist [
			hair.base.copyfile ? (word "dist\\ this.title "\\ ?)
		]
		' [回到初始目录]
		chdir :_dir_restore
		pr "保存完成
	]
	.method "load [[_projectname][
		ifelse :hair_debug [
		localmake "_dir_restore hair.base.whatdir
		chdir :hair_maindir
		chdir "dist
		chdir :_projectname
		load word :_projectname ".hproj
		chdir :_dir_restore][
			load word :_projectname ".hproj
		]]]
	.method "test [
		chdir :hair_maindir
		this.save
		pr "复制入口文件到主目录
		hair.base.copyfile (word "dist\\ this.title "\\_entry.lgo ) "_entry.lgo
		hair.base.copyfile (word "dist\\ this.title "\\ this.title ".hproj ) word this.title ".hproj 
		pr "启动测试
		ignore (hair.base.shell (se [fmslogo -w] this.width [-h] this.height [-f -l _entry.lgo]) "nooutput "vbs)
		pr "等待删除入口文件...
		wait 500
		pr "删除入口文件
		erf "_entry.lgo
		erf word this.title ".hproj 
	]

;如果是debug模式，即使用定义的项目类创建一个对象
if :hair_debug [new "yourproject "Project]

;新建一个计时器类，保持所有类的首字母大写，用于良好的编码规范
new "Timer "Class
	.attr [id 1 delay 100 command [] mode noyield]
	.before [make "hair_timer_temp 0 for [i 1 31][
		if and (not member? :i :hair_timer_id)(:hair_timer_temp=0) [make "hair_timer_temp :i]]
		ifelse :hair_timer_temp = 0 [hair.debug.error "计时器已被用完 cancel][this.id.value :hair_timer_temp
		queue "hair_timer_id :hair_timer_temp]]
	.method "start [settimer this.id this.delay this.command]
	.method "stop [cleartimer this.id]
	.method "restart [this.stop this.start]
	.after [make "hair_timer_id remove this.id :hair_timer_id this.stop]
	;此处再定义当计时器的模式变更后的操作
	.listen "mode [if this.mode.h = this.mode [cancel]
		make "hair_timer_temp 0 ifelse this.mode="noyield [
		for [i 1 16] [if and (not member? :i :hair_timer_id) (:hair_timer_temp=0)[make "hair_timer_temp :i]]
		ifelse :hair_timer_temp = 0 [hair.debug.error "noyield模式计时器已被占满 cancel] [this.id.value :hair_timer_temp]
	] [
		for [i 17 31] [if and (not member? :i :hair_timer_id) (:hair_timer_temp=0)[make "hair_timer_temp :i]]
		ifelse :hair_timer_temp = 0 [hair.debug.error "yield模式计时器已被占满 cancel] [make "hair_timer_id remove this.id :hair_timer_id this.id.value :hair_timer_temp]
	]]
	.listen "id [ifelse member? this.id :hair_timer_id [hair.debug.error "该id已被占用 cancel][queue "hair_timer_id this.id make "hair_timer_id remove this.id.h :hair_timer_id]]

;获取保存当前目录
if not name? "hair_maindir [make "hair_maindir $whatdir]
if :hair_debug [pr se [Current main dir is] :hair_maindir]

new "hair_timer_data "Timer
	.mode.value "noyield
	.delay.value 1
	.command.value [hair.background.async.repeat hair.hook.create "hair_timer_data]
	.start

;打印信息
pr [hair is started.]

end

;简单调用接口，用来给async变量增加新的运行语句
;命令版本号v1.2

to hair.background.async :co
make "hair_background_async lput :co :hair_background_async
end

;支持让其他程序简单使用data计时器创建异步语句
;异步语句同其他语句一样需要需要简短的执行时间
;命令版本号v1.2
;与直接使用data的钩子不同的是，异步语句不会反复执行
;不公开

to hair.background.async.repeat
if empty? :hair_background_async [stop]
localmake "_co first :hair_background_async
make "hair_background_async bf :hair_background_async
run :_co
;不递归每次只执行一条语句
end
