;hair框架中支持对象系统的部分，不单独抽离，仍然需要依赖hair的其他部分
;版本v2.0.0.20180829dev
;作者：SK (jjy@wiwy.us)
;@MIT License

make "attr_temp "
make "method_temp "
make "listen_temp "
make "beaf_temp "

;实现hair框架下面向对象的功能
;不对外公开
;此指令实现创建类的功能
;通过new "Xxx "Class 来实现
;命令版本号v1.2
;父类中提供了一些方法帮助创建相关功能，.attr .before .after .listen .method .inherit
;.attr [变量名 变量值 ...]
;此处主要用于储存类，不进行解析。

to hair.object.class :name
;判断类名是否已经存在
if or (member? :name :hair_object_list) (member? :name :hair_object_class) [hair.debug.error se :name [aleady exists.] stop]
;类名不能是保留字
if member? :name :hair_keepword [hair.debug.error (se "classname :name [is illegal.]) stop]
;汇总所有可用的方法提示Xx.
define word :name ". hair.object.replace :name [[][(hair.object.refresh __name "class) op [.attr .method .before .after .listen .inherit]]] 3
;直接输入类名的时候给出指定信息
define :name [[][hair.debug.error [You cannot use CLASS like this.]]]

;类也加入统计列表
queue "hair_object_class :name

;定义六种方法，这里有name变量应该换成实际值，考虑replace问题
define word :name ".attr hair.object.replace :name [[varlist][(hair.object.refresh __name "class) pprop word "hair_object_class_ __name "attr :varlist]] 3
if not member? "attr :hair_object_havedefine [define ".attr [[][]] queue "hair_object_havedefine "attr]
define word :name ".before hair.object.replace :name [[command][(hair.object.refresh __name "class) pprop word "hair_object_class_ __name "before :command]] 3
if not member? "before :hair_object_havedefine [define ".before [[][]] queue "hair_object_havedefine "before]
define word :name ".after hair.object.replace :name [[command][(hair.object.refresh __name "class) pprop word "hair_object_class_ __name "after :command]] 3
if not member? "after :hair_object_havedefine [define ".after [[][]] queue "hair_object_havedefine "after]
define word :name ".listen hair.object.replace :name [[var command][(hair.object.refresh __name "class) pprop word "hair_object_class_ __name "listen lput :var gprop word "hair_object_class_ __name "listen
  pprop word "hair_object_class_ __name :var :command]] 3
if not member? "listen :hair_object_havedefine [define ".listen [[][]] queue "hair_object_havedefine "listen]
define word :name ".method hair.object.replace :name [[var command][(hair.object.refresh __name "class) pprop word "hair_object_class_ __name "method lput :var gprop word "hair_object_class_ __name "method
  pprop word "hair_object_class_ __name :var :command]] 3
if not member? "method :hair_object_havedefine [define ".method [[][]] queue "hair_object_havedefine "method]
define word :name ".inherit hair.object.replace :name [[class][(hair.object.refresh __name "class) pprop word "hair_object_class_ __name "inherit :class]] 3
if not member? "inherit :hair_object_havedefine [define ".inherit [[][]] queue "hair_object_havedefine "inherit]

;刷新简化对象
(hair.object.refresh :name "class)

;退出时删除所有相关的过程
hair.hook.bind "hair_exit se "bury quoted :name
hair.hook.bind "hair_exit se "bury quoted word :name ".
hair.hook.bind "hair_exit se "bury quoted word :name ".attr
hair.hook.bind "hair_exit se "bury quoted word :name ".before
hair.hook.bind "hair_exit se "bury quoted word :name ".after
hair.hook.bind "hair_exit se "bury quoted word :name ".listen
hair.hook.bind "hair_exit se "bury quoted word :name ".method
hair.hook.bind "hair_exit se "bury quoted word :name ".inherit
end


;该命令判断一个字符串是否为类
;命令版本号v1.4

to hair.object.classp :name
if member? :name :hair_object_class [op "true]
op "false
end

;销毁对象
;命令版本号v1.2

to hair.object.destroy :name
if not member? :name :hair_object_list [hair.debug.error "对象名不存在 stop]
;如果有after内容则调用，从new直接转过来的是没有定义after的
if name? (word "hair_object_ :name "_after) [
  localmake "_cancel 0
  catch "cancel [run thing (word "hair_object_ :name "_after) make "_cancel 1]
  if :_cancel = 0 [stop]
  ]
;不被cancel则执行下面的删除操作
;删除不在tip里面的东西，对象表、after、对象过程
make "hair_object_list remove :name :hair_object_list
ern (word "hair_object_ :name "_after)
;因为是否是对象这里做了判断，所以需要对对象名过程做直接删除
er :name
;根据tip删除相关内容，无视属性和方法的区别
localmake "tip_temp thing (word "hair_object_ :name "_tip)
repeat count :tip_temp [
  ;与regdot一一对应，首先删除属性的实际变量，此版本不考虑简化过程的问题
  ern (word "hair_object_ :name "_ bf item repcount :tip_temp)
  ;删除输出变量或方法内容的过程
  er (word :name item repcount :tip_temp)
  ;删除赋值过程
  er (word :name item repcount :tip_temp ".value)
  er (word :name item repcount :tip_temp ".val)
  ;删除输出修改前变量内容的过程
  er (word :name item repcount :tip_temp ".h)
  ;删除取消属性变动的cancel过程
  er (word :name item repcount :tip_temp ".cancel)
]
;删除tip
ern (word "hair_object_ :name "_tip)
bury word :name ".
end
to cancel
throw "cancel
end


;新建对象
;读取类中的数据创建对象
;默认创建objname,class属性，提供对this的解释，挂载list，创建对象过程
;对象的复制copy(下版本？)
;命令版本号v1.3

to hair.object.new :name :class
;当新建的是一个类的时候直接调用class命令处理
if :class = "Class [hair.object.class :name stop]
;对象名合法性判断
if or member? :name :hair_object_list procedure? :name [hair.debug.error [objname aleady exists.] stop]
if member? :name :hair_keepword [hair.debug.error [objname is illegal] stop]
if not proplist? word "hair_object_class_ :class [hair.debug.error (se "Class :class [does not exist.]) stop]

;定义xx.过程显示所有可用操作提示
make (word "hair_object_ :name "_tip) []
define word :name ". hair.object.replace :name [[][hair.object.refresh __name op thing (word "hair_object_ __name "_tip)]] 3

;首先定义内置的对象属性
queue (word "hair_object_ :name "_tip) ".objname
queue (word "hair_object_ :name "_tip) ".class
define word :name ".objname hair.object.replace :name [[][hair.object.refresh __name op __name]] 3
define word :name ".class hair.object.replace :name [[][hair.object.refresh __name op __x]] se 3 :class
if not member? "objname :hair_object_havedefine [define ".objname [[][]] queue "hair_object_havedefine "objname]
if not member? "class :hair_object_havedefine [define ".class [[][]] queue "hair_object_havedefine "class]

;创建一个对象过程，显示不能直接使用对象
define :name [[][hair.debug.error [You cannot use object like this.]]]

;开始解析所有的继承关系
make "attr_temp []
make "method_temp []
make "listen_temp []
make "beaf_temp []
findinherit :class

;解释this
make "beaf_temp hair.object.replace :name :beaf_temp 1
make "method_temp hair.object.replace :name :method_temp 1
make "listen_temp hair.object.replace :name :listen_temp 1

;创建相关属性
repeat (count :attr_temp)/2 [hair.object.regdot :name item repcount*2-1 :attr_temp item repcount*2 :attr_temp 1]
;for [i 1 (count :attr_temp)/2] [hair.object.regdot :name item :i*2-1 :attr_temp item :i*2 :attr_temp 1]

;处理before问题
localmake "_cancel 0
catch "cancel [run first :beaf_temp make "_cancel 1]
if :_cancel = 0 [
  ' [因为cancel抛出而删除之前创建的属性]
  ' [1.删除tip变量和xx.过程]
  ' [bury se word ("hair_object_ :name "_tip) word :name ".]
  ' [2.删除objname和class属性以及其他属性]
  ' [3.移除对象过程和取消挂载]
  hair.object.destroy :name stop
]

;挂载对象到对象列表
queue "hair_object_list :name

;创建方法、保存after内容
repeat (count :method_temp)/2 [hair.object.regdot :name item repcount*2-1 :method_temp item repcount*2 :method_temp 2]
;for [i 1 (count :method_temp)/2] [hair.object.regdot :name item :i*2-1 :method_temp item :i*2 :method_temp 2]
make (word "hair_object_ :name "_after) last :beaf_temp

;在属性变动时实施listen中的内容，即调用创建属性时保留的钩子函数入口，注意对cancel的解析应该为恢复原值并且终止listen过程
repeat (count :listen_temp)/2 [hair.hook.bind (word :name ". item repcount*2-1 :listen_temp "_onchange) se [catch "cancel] (list se [run] (list item repcount*2
  hair.object.replace :name :listen_temp se 2 (word :name ". item repcount*2-1 :listen_temp ".cancel)))]

;执行new也需要刷新简化，但是因为调用了相关内容，所以应该放在最后，即被cancel了就无法简化
hair.object.refresh :name

end

;查询所有的继承类，并汇总
to findinherit :curclass
;首先是不断递归找到最底层的继承类
if member? "inherit replaceattr2 plist word "hair_object_class_ :curclass [findinherit gprop word "hair_object_class_ :curclass "inherit]

;汇总所有的属性定义，遇到相同的属性以最后定义的为准
localmake "attr_cur gprop word "hair_object_class_ :curclass "attr
replaceattr :attr_cur replaceattr2 :attr_temp

;相同的方法被最后一次定义覆盖
localmake "method_cur gprop word "hair_object_class_ :curclass "method
replacemethod :method_cur replaceattr2 :method_temp :curclass

;相同的监听被最后一次定义覆盖
localmake "listen_cur gprop word "hair_object_class_ :curclass "listen
replacelisten :listen_cur replaceattr2 :listen_temp :curclass

;before和after支持叠加，存在取到错误默认值的情况，但这是代码问题，框架这里不做判断
if empty? :beaf_temp [make "beaf_temp [[][]]]
make "beaf_temp list (se gprop word "hair_object_class_ :curclass "before first :beaf_temp) (se gprop word "hair_object_class_ :curclass "after last :beaf_temp)

;已知的问题是存在重复继承，暂不处理
end

to replacemethod :cur :temp :class
if empty? :cur [stop]
ifelse not member? first :cur :temp [make "temp se :temp first :cur make "method_temp (se :method_temp first :cur (list gprop word "hair_object_class_ :class first :cur))] [
  localmake "index_temp hair.base.index first :cur :temp
  make "method_temp (se hair.base.getitem :index_temp*2-1 :method_temp (list gprop word "hair_object_class_ :class first :cur) hair.base.delitem :index_temp*2 :method_temp)]
replacemethod bf :cur :temp :class
end

to replacelisten :cur :temp :class
if empty? :cur [stop]
ifelse not member? first :cur :temp [make "temp se :temp first :cur make "listen_temp (se :listen_temp first :cur (list gprop word "hair_object_class_ :class first :cur))] [
  localmake "index_temp hair.base.index first :cur :temp
  make "listen_temp (se hair.base.getitem :index_temp*2-1 :listen_temp (list gprop word "hair_object_class_ :class first :cur) hair.base.delitem :index_temp*2 :listen_temp)]
replacelisten bf :cur :temp :class
end


to replaceattr :cur :temp
if empty? :cur [stop]
ifelse not member? first :cur :temp [make "temp se :temp first :cur make "attr_temp se :attr_temp hair.base.getitem 2 :cur] [
  localmake "index_temp hair.base.index first :cur :temp
  make "attr_temp (se hair.base.getitem :index_temp*2-1 :attr_temp (list first bf :cur) hair.base.delitem :index_temp*2 :attr_temp)]
replaceattr bf bf :cur :temp
end

;删除temp中所有的偶数项，即属性表中所有的属性内容，保留属性的名称
to replaceattr2 :temp
op hair.object.even :temp
end
to hair.object.even :temp
if 2 > count :temp [op :temp]
op filter [equal? remainder # 2 1] :temp
end


;该命令判断一个字符串是否为对象
;命令版本号v1.2

to hair.object.p :name
if member? :name :hair_object_list [op "true]
op "false
end


;刷新current对应的对象的方法简化
;命令版本1.2
;不对外

to hair.object.refresh :name [:type "object]
;创建类的时候也可以作为一个对象简化操作，刷新所有创建类相关的方法
;注意不能用错对象相关的指令，否则不好debug
if not :name = "hair_object_current [
  make "hair_object_current :name
  ifelse :type = "object [localmake "_ref thing (word "hair_object_ :name "_tip)][localmake "_ref [.attr .method .before .after .listen .inherit]]
  repeat count :_ref [copydef item repcount :_ref word :name item repcount :_ref]
  ;foreach run word :name ". [copydef ? word :name ?]
]
end

;对象注册属性或方法的通用步骤
;命令版本号v1.3
;汇总方法提示，.命令简化刷新所有的属性和方法，解析this

to hair.object.regdot :name :x :content :type
if and (not member? :x [class objname]) member? :x :hair_keepword [hair.debug.error [The name of attr or method is illegal.] stop]
;汇总方法提示
queue (word "hair_object_ :name "_tip) word ". :x
if :type = 1 [queue (word "hair_object_ :name "_tip) (word ". :x ".val)
  queue (word "hair_object_ :name "_tip) (word ". :x ".value)]

;定义相关过程,type为1即为属性,2为方法
ifelse :type = 1 [
  ;创建一个对应的实际变量
  make (word "hair_object_ :name "_ :x) :content
  ;定义直接输出变量内容的过程
  define (word :name ". :x) hair.object.replace :name [[][hair.object.refresh __name op thing (word "hair_object_ __name "_ __x )]] se 3 :x
  ;定义value和val用于赋值，在此处应该考虑保留钩子触发listen
  define (word :name ". :x ".value) hair.object.replace :name [[val][hair.object.refresh __name
    ;保存修改前的变量内容
    localmake "value run (word __name ". __x )
    if word? :value [define (word __name ". __x ".h) list [] se [op] quoted :value]
    if list? :value [define (word __name ". __x ".h) list [] se [op] (list :value)]
    ;真正进行变量替换
    make (word "hair_object_ __name "_ __x ) :val
    ;在替换完之后触发钩子，cancel即为还原值
    hair.hook.create (word __name ". __x "_onchange)
  ]] se 3 :x
  copydef (word :name ". :x ".val) (word :name ". :x ".value)
  ;定义属性变动的cancel过程
  define (word :name ". :x ".cancel) hair.object.replace :name [[][make (word "hair_object_ __name "_ __x ) run (word __name ". __x ".h) throw "cancel]] se 3 :x
][
  ;替换掉content中的this，这里面通常不会出现cancel
  make "content hair.object.replace :name :content 1
  ifelse not empty? :content [ifelse list? first :content [define (word :name ". :x) list first :content (se [hair.object.refresh] quoted :name last :content)]
    [define (word :name ". :x) list [] (se [hair.object.refresh] quoted :name :content)]][
    define (word :name ". :x) list [] (se [hair.object.refresh] quoted :name :content)]
]

;判断如果不在简化列表里即新建过程
if not member? :x :hair_object_havedefine [define word ". :x [[][]] queue "hair_object_havedefine :x]
if and :type=1 not member? word :x ".value :hair_object_havedefine [define (word ". :x ".value) [[][]] define (word ". :x ".val) [[][]] queue "hair_object_havedefine word :x ".value]
end

;通常用来替换this关键字(我想也仅仅应该支持字符串的匹配)
;根据新逻辑应该支持替换指定字符串，例如new中的cancel，以及经常会在定义中出现的__name(包括__x)
;type=1 意思是对this进行替换，type=2 意思是cancel，type=3 意思是__name
;该指令为对象模块内部指令，不对外公开，不需要检查hair运行，希望有人可以帮忙优化
;已知bug包括括号必须要与文本用空格分开，才能正确识别括号紧挨着的文本。
;命令版本号v1.2

to hair.object.replace :objname :string :type
if number? :string [op :string]
if word? :string [op hair.object.replace.repeat :objname :string :type]
op hair.object.replace.foreach :objname [] :string :type
end

to hair.object.replace.foreach :objname :left :right :type
;遍历表
if empty? :right [op :left]
localmake "center first :right
local "temp
if number? :center [make "temp :center]
if list? :center [make "temp hair.object.replace.foreach :objname [] :center :type]
if word? :center [make "temp hair.object.replace.repeat :objname :center :type]
op hair.object.replace.foreach :objname se :left (list :temp) bf :right :type
end

to hair.object.replace.repeat :objname :value :type
;遍历字
;对this进行识别
if :type=1 [if :value = "this [op :objname]
  if :value = quoted "this [op quoted :objname]
  if :value = first [(this] [op word first [(] :objname]
  if :value = first [this)] [op word :objname first [)]]
  if (count :value)>4 [if "this. = hair.base.getitem 5 :value [op (word :objname ". hair.base.delitem 5 :value)]
	if (quoted "this.) = hair.base.getitem 6 :value [op (word quoted :objname ". hair.base.delitem 6 :value)]
  ]]
;对cancel进行识别
;cancel因为基本上是用户在定义的时候使用，所以有较大概率与括号相连，考虑在文档中提示已知bug
;这里cancel的替换主要用在监听变量变化时还原
if and (first :type)=2 :value="cancel [op last :type]
;这里先做保留.....
;对__name及__x进行识别
;通常__name是单独在表中出现的，比如和word出现在一起，用在定义对象相关过程的时候，而且其一般不会作为结尾，即与)相连
if and (first :type)=3 :value="__name [op QUOTED :objname]
if and (first :type)=3 :value = "__x [op quoted last :type]
;奇怪的语法，应对新出现的情况，即在type里面保留需要定义的方法或者属性的名称，单独写3也不会出问题
;不在所有的替换要求内
op :value
end

;根据类型选择对象
;新的逻辑可能会导致select的效率很低
;命令版本号v1.2

to hair.object.select :class
localmake "currentrestore :hair_object_current
localmake "classall []
repeat count :hair_object_list [queue "classall run (list word item repcount :hair_object_list ".class)]
ifelse member? :currentrestore :hair_object_list [hair.object.refresh :currentrestore] [(hair.object.refresh :currentrestore "class)]
localmake "objall []
repeat count :classall [if (item repcount :classall) = :class [queue "objall repcount]]
make "classall []
repeat count :objall [queue "classall item (item repcount :objall) :hair_object_list]
op :classall
end

