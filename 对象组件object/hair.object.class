;实现hair框架下面向对象的功能
;不对外公开
;此指令实现创建类的功能
;通过new "Xxx "Class 来实现
;命令版本号v1.2
;父类中提供了一些方法帮助创建相关功能，.attr .before .after .listen .method .inherit
;.attr [变量名 变量值 ...]
;此处主要用于储存类，不进行解析。

to hair.object.class :name
;判断类名是否已经存在
if or (member? :name :hair_object_list) (member? :name :hair_object_class) [hair.debug.error se :name "类名被占用 stop]
;类名不能是保留字
if member? :name :hair_keepword [hair.debug.error "类名非法 stop]
;汇总所有可用的方法提示Xx.
define word :name ". hair.object.replace :name [[][(hair.object.refresh __name "class) op [.attr .method .before .after .listen .inherit]]] 3
;直接输入类名的时候给出指定信息
define :name [[][hair.debug.error "您不能直接使用类]]

;类也加入统计列表
queue "hair_object_class :name

;定义六种方法，这里有name变量应该换成实际值，考虑replace问题
define word :name ".attr hair.object.replace :name [[varlist][(hair.object.refresh __name "class) pprop word "hair_object_class_ __name "attr :varlist]] 3
if not member? "attr :hair_object_havedefine [define ".attr [[][]] queue "hair_object_havedefine "attr]
define word :name ".before hair.object.replace :name [[command][(hair.object.refresh __name "class) pprop word "hair_object_class_ __name "before :command]] 3
if not member? "before :hair_object_havedefine [define ".before [[][]] queue "hair_object_havedefine "before]
define word :name ".after hair.object.replace :name [[command][(hair.object.refresh __name "class) pprop word "hair_object_class_ __name "after :command]] 3
if not member? "after :hair_object_havedefine [define ".after [[][]] queue "hair_object_havedefine "after]
define word :name ".listen hair.object.replace :name [[var command][(hair.object.refresh __name "class) pprop word "hair_object_class_ __name "listen lput :var gprop word "hair_object_class_ __name "listen
  pprop word "hair_object_class_ __name :var :command]] 3
if not member? "listen :hair_object_havedefine [define ".listen [[][]] queue "hair_object_havedefine "listen]
define word :name ".method hair.object.replace :name [[var command][(hair.object.refresh __name "class) pprop word "hair_object_class_ __name "method lput :var gprop word "hair_object_class_ __name "method
  pprop word "hair_object_class_ __name :var :command]] 3
if not member? "method :hair_object_havedefine [define ".method [[][]] queue "hair_object_havedefine "method]
define word :name ".inherit hair.object.replace :name [[class][(hair.object.refresh __name "class) pprop word "hair_object_class_ __name "inherit :class]] 3
if not member? "inherit :hair_object_havedefine [define ".inherit [[][]] queue "hair_object_havedefine "inherit]

;刷新简化对象
(hair.object.refresh :name "class)

;退出时删除所有相关的过程
hair.hook.bind "hair_exit se "bury quoted :name
hair.hook.bind "hair_exit se "bury quoted word :name ".
hair.hook.bind "hair_exit se "bury quoted word :name ".attr
hair.hook.bind "hair_exit se "bury quoted word :name ".before
hair.hook.bind "hair_exit se "bury quoted word :name ".after
hair.hook.bind "hair_exit se "bury quoted word :name ".listen
hair.hook.bind "hair_exit se "bury quoted word :name ".method
hair.hook.bind "hair_exit se "bury quoted word :name ".inherit
end
bury "hair.object.class
