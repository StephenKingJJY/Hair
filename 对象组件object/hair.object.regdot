;对象注册属性或方法的通用步骤
;命令版本号v1.3
;汇总方法提示，.命令简化刷新所有的属性和方法，解析this

to hair.object.regdot :name :x :content :type
if and (not member? :x [class objname]) member? :x :hair_keepword [hair.debug.error "属性或方法名称不合法 stop]
;汇总方法提示
queue (word "hair_object_ :name "_tip) word ". :x
if :type = 1 [queue (word "hair_object_ :name "_tip) (word ". :x ".val)
  queue (word "hair_object_ :name "_tip) (word ". :x ".value)]

;定义相关过程,type为1即为属性,2为方法
ifelse :type = 1 [
  ;创建一个对应的实际变量
  make (word "hair_object_ :name "_ :x) :content
  ;定义直接输出变量内容的过程
  define (word :name ". :x) hair.object.replace :name [[][hair.object.refresh __name op thing (word "hair_object_ __name "_ __x )]] se 3 :x
  ;定义value和val用于赋值，在此处应该考虑保留钩子触发listen
  define (word :name ". :x ".value) hair.object.replace :name [[val][hair.object.refresh __name
    ;保存修改前的变量内容
    localmake "value run (word __name ". __x )
    if word? :value [define (word __name ". __x ".h) list [] se [op] quoted :value]
    if list? :value [define (word __name ". __x ".h) list [] se [op] (list :value)]
    ;真正进行变量替换
    make (word "hair_object_ __name "_ __x ) :val
    ;在替换完之后触发钩子，cancel即为还原值
    hair.hook.create (word __name ". __x "_onchange)
  ]] se 3 :x
  copydef (word :name ". :x ".val) (word :name ". :x ".value)
  ;定义属性变动的cancel过程
  define (word :name ". :x ".cancel) hair.object.replace :name [[][make (word "hair_object_ __name "_ __x ) run (word __name ". __x ".h) throw "cancel]] se 3 :x
][
  ;替换掉content中的this，这里面通常不会出现cancel
  make "content hair.object.replace :name :content 1
  ifelse not empty? :content [ifelse list? first :content [define (word :name ". :x) list first :content (se [hair.object.refresh] quoted :name last :content)]
    [define (word :name ". :x) list [] (se [hair.object.refresh] quoted :name :content)]][
    define (word :name ". :x) list [] (se [hair.object.refresh] quoted :name :content)]
]

;判断如果不在简化列表里即新建过程
if not member? :x :hair_object_havedefine [define word ". :x [[][]] queue "hair_object_havedefine :x]
if and :type=1 not member? word :x ".value :hair_object_havedefine [define (word ". :x ".value) [[][]] define (word ". :x ".val) [[][]] queue "hair_object_havedefine word :x ".value]
end
bury "hair.object.regdot
